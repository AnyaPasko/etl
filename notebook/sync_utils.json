{
	"name": "sync_utils",
	"properties": {
		"folder": {
			"name": "anya_testing"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "actestspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c2a63b22-74eb-4bf8-80ce-381faaab906b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/9a173807-014a-437d-a720-e2f0506e3157/resourceGroups/data-prototyping/providers/Microsoft.Synapse/workspaces/ac-test/bigDataPools/actestspark",
				"name": "actestspark",
				"type": "Spark",
				"endpoint": "https://ac-test.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/actestspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"'''Utils for synchronizing data between Supabase and TerminusDB'''\r\n",
					"\r\n",
					"from .transformation_utils import (\r\n",
					"    transform_to_supabase_format,\r\n",
					"    transform_read_only_to_terminus_format,\r\n",
					"    batch_transform_to_supabase_format\r\n",
					")\r\n",
					"\r\n",
					"def sync_data_from_supabase_to_terminus(\r\n",
					"        supabase_client,\r\n",
					"        terminus_client,\r\n",
					"        supabase_schema,\r\n",
					"        supabase_table,\r\n",
					"        terminus_type,\r\n",
					"        terminus_id_column='id',\r\n",
					"        transformation_config=None,\r\n",
					"        query_config=None\r\n",
					"):\r\n",
					"    \"\"\"\r\n",
					"    Synchronizes data between Supabase and TerminusDB.\r\n",
					"\r\n",
					"    Args:\r\n",
					"        supabase_client (SupabaseClient): The Supabase client object.\r\n",
					"        supabase_schema (str): The name of the Supabase schema.\r\n",
					"        terminus_type (str): The type of the documents in TerminusDB.\r\n",
					"        terminus_id_column (str): The column name containing the ID of the documents in TerminusDB.\r\n",
					"        transform_function (function): The function to transform the data from Supabase to TerminusDB format.\r\n",
					"    \"\"\"\r\n",
					"    query_config = query_config if query_config else {}\r\n",
					"    supabase_data = supabase_client.select_from_supabase(supabase_schema,supabase_table,**query_config)\r\n",
					"\r\n",
					"    terminus_data = terminus_client.get_terminus_docs_by_type(terminus_type)\r\n",
					"    inserted_items = []\r\n",
					"    updating_items = []\r\n",
					"\r\n",
					"    # Synchronize updates from Supabase to TerminusDB\r\n",
					"    for supabase_item in supabase_data:\r\n",
					"        matching_terminus_item = next(\r\n",
					"            (item for item in terminus_data if item[terminus_id_column] == str(supabase_item['id'])),\r\n",
					"            None\r\n",
					"        )\r\n",
					"        if matching_terminus_item:\r\n",
					"            should_update, updates = should_update_doc_in_terminus(\r\n",
					"                supabase_item,\r\n",
					"                matching_terminus_item,\r\n",
					"                terminus_type,\r\n",
					"                terminus_id_column,\r\n",
					"                transformation_config\r\n",
					"            )\r\n",
					"            if should_update:\r\n",
					"                updating_items.append((matching_terminus_item, updates))\r\n",
					"\r\n",
					"    if len(updating_items) > 0:\r\n",
					"        terminus_client.update_doc_in_terminus(updating_items)\r\n",
					"        print(f\"Updated {len(updating_items)} items in TerminusDB of type {terminus_type}\")\r\n",
					"\r\n",
					"    for supabase_item in supabase_data:\r\n",
					"        if len(terminus_data) == 0 or not any(\r\n",
					"            terminus_item[terminus_id_column] == str(supabase_item['id']) for terminus_item in terminus_data\r\n",
					"        ):\r\n",
					"            transformed_supabase_item = transform_read_only_to_terminus_format(\r\n",
					"                terminus_type,\r\n",
					"                supabase_item,\r\n",
					"                terminus_id_column,\r\n",
					"                transformation_config\r\n",
					"            )\r\n",
					"            terminus_client.import_doc_into_terminus(transformed_supabase_item, terminus_type, terminus_id_column)\r\n",
					"            inserted_items.append(transformed_supabase_item)\r\n",
					"\r\n",
					"    if inserted_items:\r\n",
					"        print(f\"Inserted {inserted_items} into TerminusDB of type {terminus_type}\")\r\n",
					"    else:\r\n",
					"        print(f\"No new items to insert into TerminusDB for the document type {terminus_type}\")\r\n",
					"\r\n",
					"    items_to_delete = []\r\n",
					"\r\n",
					"    for terminus_item in terminus_data:\r\n",
					"        if len(supabase_data) == 0 or not any(\r\n",
					"            str(supabase_item['id']) == terminus_item[terminus_id_column] for supabase_item in supabase_data\r\n",
					"        ):\r\n",
					"            items_to_delete.append(terminus_item)\r\n",
					"\r\n",
					"    if items_to_delete:\r\n",
					"        for item in items_to_delete:\r\n",
					"            terminus_client.delete_from_terminus(item['@id'])\r\n",
					"    else:\r\n",
					"        print(f\"No items to delete from TerminusDB for the document type {terminus_type}\")\r\n",
					"\r\n",
					"def sync_data_from_terminus_to_supabase(\r\n",
					"    supabase_client,\r\n",
					"    terminus_client,\r\n",
					"    schema_name,\r\n",
					"    table_name,\r\n",
					"    document_type,\r\n",
					"    id_col='id',\r\n",
					"    transformation_config=None,\r\n",
					"    is_deleting=False\r\n",
					"):\r\n",
					"    \"\"\"\r\n",
					"    Synchronizes data between Supabase and Terminus.\r\n",
					"\r\n",
					"    Args:\r\n",
					"        supabase_client: The Supabase client object used to interact with the Supabase database.\r\n",
					"        terminus_client: The Terminus client object used to interact with the Terminus API.\r\n",
					"        schema_name: The schema name in Supabase.\r\n",
					"        table_name: The table name in Supabase.\r\n",
					"        document_type: The document type to fetch from Terminus.\r\n",
					"\r\n",
					"    Returns:\r\n",
					"        None\r\n",
					"    \"\"\"\r\n",
					"\r\n",
					"    transformation_config = transformation_config if transformation_config else {}\r\n",
					"\r\n",
					"    response = supabase_client.select_from_supabase(schema_name, table_name, \"*\")\r\n",
					"    supabase_list = [{\r\n",
					"        'id': row.get('id', row.get('terminus_id')),\r\n",
					"    } for row in response]\r\n",
					"\r\n",
					"    terminus_list = terminus_client.get_terminus_docs_by_type(document_type)\r\n",
					"    transformed_items = []\r\n",
					"\r\n",
					"    if len(terminus_list) != 0:\r\n",
					"        transformation_util_key = transformation_config.get('transformation_util_key', terminus_list[0]['@type'])\r\n",
					"        if transformation_config.get('batch_process', False):\r\n",
					"            transformed_items = batch_transform_to_supabase_format(\r\n",
					"                transformation_util_key,\r\n",
					"                terminus_list,\r\n",
					"                terminus_client\r\n",
					"            )\r\n",
					"        else:\r\n",
					"            for terminus_item in terminus_list:\r\n",
					"                transformed_item = transform_to_supabase_format(\r\n",
					"                    transformation_util_key,\r\n",
					"                    terminus_item,\r\n",
					"                    transformation_config\r\n",
					"                )\r\n",
					"                if isinstance(transformed_item, list):\r\n",
					"                    transformed_items.extend(transformed_item)\r\n",
					"                elif transformed_item is not None:\r\n",
					"                    transformed_items.append(transformed_item)\r\n",
					"\r\n",
					"\r\n",
					"    if is_deleting:\r\n",
					"        items_to_delete = []\r\n",
					"\r\n",
					"        for supabase_item in supabase_list:\r\n",
					"            if len(terminus_list) == 0 or not any(\r\n",
					"                str(supabase_item['id']) == terminus_item.get(id_col) for terminus_item in transformed_items\r\n",
					"            ):\r\n",
					"                items_to_delete.append(supabase_item)\r\n",
					"\r\n",
					"        if items_to_delete:\r\n",
					"            for item in items_to_delete:\r\n",
					"                supabase_client.delete_from_supabase(schema_name, table_name, item['id'], id_col)\r\n",
					"        else:\r\n",
					"            print(f\"No items to delete from {schema_name}.{table_name} table in Supabase\")\r\n",
					"    else:\r\n",
					"        if len(transformed_items) != 0:\r\n",
					"            supabase_client.upsert_data_into_supabase(schema_name, table_name, transformed_items, id_col)\r\n",
					"        else:\r\n",
					"            print(f\"No items to upsert into {schema_name}.{table_name} table in Supabase\")\r\n",
					"\r\n",
					"def should_update_doc_in_terminus(\r\n",
					"    supabase_item,\r\n",
					"    terminus_item,\r\n",
					"    terminus_type,\r\n",
					"    terminus_id_column,\r\n",
					"    transformation_config\r\n",
					"):\r\n",
					"    '''Determines if a document in TerminusDB should be updated based on the Supabase item and the Terminus item.'''\r\n",
					"    needs_update = False\r\n",
					"    updates = {}\r\n",
					"\r\n",
					"    # Transform the Supabase item to TerminusDB format\r\n",
					"    transformed_supabase_item = transform_read_only_to_terminus_format(\r\n",
					"        terminus_type,\r\n",
					"        supabase_item,\r\n",
					"        terminus_id_column,\r\n",
					"        transformation_config\r\n",
					"    )\r\n",
					"\r\n",
					"    # Compare each relevant key\r\n",
					"    for key, value in transformed_supabase_item.items():\r\n",
					"        if key in terminus_item:\r\n",
					"            if terminus_item[key] != str(value):\r\n",
					"                updates[key] = str(value)\r\n",
					"                needs_update = True\r\n",
					"\r\n",
					"    return needs_update, updates\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}